/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/battle.js":
/*!***********************!*\
  !*** ./src/battle.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Player: () => (/* binding */ Player),\n/* harmony export */   Ship: () => (/* binding */ Ship)\n/* harmony export */ });\nclass Ship {\n  constructor(x1, y1, x2, y2) {\n    this.hitCounter = 0;\n    this.x1 = x1;\n    this.x2 = x2;\n    this.y1 = y1;\n    this.y2 = y2;\n    this.size = Math.max(y2 - y1, x2 - x1) + 1;\n  }\n  getSize() {\n    return this.size;\n  }\n  getHitCounter() {\n    return this.hitCounter;\n  }\n  hit() {\n    this.hitCounter += 1;\n  }\n  isSunk() {\n    return this.hitCounter === this.size;\n  }\n  coordinateArray() {\n    let arr = [];\n    for (let i = 0; i < this.size; i++) {\n      if (this.y2 - this.y1 > this.x2 - this.x1) {\n        arr.push([this.x2, this.y1 + i]);\n      } else {\n        arr.push([this.x1 + i, this.y2]);\n      }\n    }\n    return arr;\n  }\n}\nclass Gameboard {\n  constructor() {\n    this.attackList = [];\n    this.shipList = [];\n    let carrier = new Ship(1, 1, 5, 1);\n    let battleship = new Ship(1, 2, 1, 5);\n    let destroyer = new Ship(6, 5, 8, 5);\n    let submarine = new Ship(7, 8, 7, 10);\n    let patrol = new Ship(1, 9, 1, 10);\n    this.carrier = carrier;\n    this.battleship = battleship;\n    this.destroyer = destroyer;\n    this.submarine = submarine;\n    this.patrol = patrol;\n    this.shipList.push(carrier);\n    this.shipList.push(battleship);\n    this.shipList.push(destroyer);\n    this.shipList.push(submarine);\n    this.shipList.push(patrol);\n  }\n  recieveAttack(x, y) {\n    this.attackList.push([x, y]);\n    for (const ship of this.shipList) {\n      let coordinates = ship.coordinateArray();\n      // console.log(coordinates);\n      // console.log(`hitCounter: ${ship.getHitCounter()}`)\n      if (coordinates.some(pair => pair[0] == x && pair[1] == y)) {\n        ship.hit();\n        return true;\n      }\n    }\n    return false;\n  }\n  allSink() {\n    let counter = 0;\n    for (const ship of this.shipList) {\n      console.log(`counter: ${counter} `);\n      console.log(`hitCounter: ${ship.getHitCounter()}`);\n      if (ship.isSunk()) {\n        counter += 1;\n        console.log(`Ship: ${ship}`);\n      }\n    }\n    if (counter == 5) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  getCoordinateList() {\n    let coordinateList = [];\n    for (const ship of this.shipList) {\n      // console.log(`ship.coordinateArray: ${ship.coordinateArray()}`);\n      coordinateList = [...coordinateList, ...ship.coordinateArray()];\n    }\n    return coordinateList;\n  }\n  getAttackList() {\n    return this.attackList;\n  }\n}\nclass Player {\n  constructor() {\n    let gameboard = new Gameboard();\n    this.gameboard = gameboard;\n  }\n}\n\n\n//# sourceURL=webpack://battleship/./src/battle.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _battle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./battle.js */ \"./src/battle.js\");\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let playerOne = new _battle_js__WEBPACK_IMPORTED_MODULE_0__.Player();\n  let playerTwo = new _battle_js__WEBPACK_IMPORTED_MODULE_0__.Player();\n  let currentHighlight;\n  let currentSize = 1;\n  let currentDirection;\n  let placeAllowed;\n  let placeLocation;\n  let shipNames = [\"Carrier\", \"Battleship\", \"Destroyer\", \"Submarine\", \"Patrol\"];\n  const leftSide = document.getElementById(\"left_side\");\n  const rightSide = document.getElementById(\"right_side\");\n  let announcement = document.getElementById(\"announcement\");\n  announcement.textContent = \"Arrange your ships!\";\n  fullyRenderSide(leftSide, playerOne);\n  fullyRenderSide(rightSide, playerTwo);\n  let currentId;\n  function addGridBoxes(side, coords) {\n    for (let i = 1; i <= 10; i++) {\n      for (let j = 1; j <= 10; j++) {\n        if (checkPair(i, j, coords) == false) {\n          let gridBox = document.createElement(\"div\");\n          gridBox.classList.add(\"gridBox\");\n          gridBox.setAttribute(\"horizontal\", `${i}`);\n          gridBox.setAttribute(\"vertical\", `${j}`);\n          if (side.id == \"left_side\") {\n            gridBox.id = `Lsquare${(i - 1) * 10 + j}`;\n          } else {\n            gridBox.id = `Rsquare${(i - 1) * 10 + j}`;\n          }\n          gridBox.vertical = j;\n          side.appendChild(gridBox);\n        }\n      }\n    }\n  }\n  function fullyRenderSide(side, player) {\n    side.innerHTML = \"\";\n    let shipCoordinates = player.gameboard.getCoordinateList();\n    let restrictedSquares = makeRestrictedSquaresList(shipCoordinates);\n    addGridBoxes(side, shipCoordinates);\n    renderGrid(side, player, restrictedSquares);\n  }\n  function checkPair(x, y, shipCoordinates) {\n    for (const pair of shipCoordinates) {\n      if (pair[0] == x && pair[1] == y) {\n        return true;\n      }\n    }\n    return false;\n  }\n  function makeRestrictedSquaresList(coordList) {\n    let restrictedSquares = [];\n    for (const pair of coordList) {\n      let x = parseInt(pair[0]);\n      let y = parseInt(pair[1]);\n      let squareNum = (x - 1) * 10 + y;\n      restrictedSquares.push(squareNum);\n    }\n    return restrictedSquares;\n\n    // console.log(restrictedSquares);\n\n    // console.log()\n  }\n  function clearSquares() {\n    let allSquares = document.querySelectorAll(\".gridBox\");\n    allSquares.forEach(square => {\n      square.style.backgroundColor = \"white\";\n    });\n  }\n  function checkCollision(squareNum, horizontal, restrictedSquares) {\n    let square = document.getElementById(squareNum);\n    console.log(`squareNum in collision: ${squareNum}`);\n    for (let i = 0; i < currentSize; i++) {\n      // console.log(`squareNum+i: ${squareNum+i}`);\n      // console.log(`currentSize in collision: ${currentSize}`)\n\n      if (horizontal === \"true\") {\n        if (restrictedSquares.includes(squareNum + i)) {\n          return true;\n        }\n      } else {\n        if (restrictedSquares.includes(squareNum + i * 10)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function renderGrid(side, player, restrictedSquares) {\n    const shipList = player.gameboard.shipList;\n    let counter = 0;\n    let colorList = [\"gray\", \"blue\", \"orange\", \"red\", \"yellow\"];\n    let sideText;\n    if (side.id == \"left_side\") {\n      sideText = \"L\";\n    } else {\n      sideText = \"R\";\n    }\n    side.addEventListener(\"dragover\", e => {\n      e.preventDefault(); // Allow drop\n\n      let dragShip = document.getElementById(currentId);\n      let shipSize = dragShip.getAttribute(\"size\");\n      let horizontal = dragShip.getAttribute(\"horizontal\");\n      currentSize = parseInt(dragShip.getAttribute(\"size\"));\n      let previousSquare;\n      if (currentHighlight) {\n        previousSquare = document.getElementById(currentHighlight);\n        if (e.target.id != previousSquare) {\n          clearSquares();\n        }\n      }\n      let targetId = e.target.id;\n      console.log(`dragShip.id: ${dragShip.id} e.target.id[0]${e.target.id[0]}`);\n      if (dragShip.id[0] != e.target.id[0]) {\n        placeAllowed = false;\n        return;\n        // Skip processing for elements not within this side\n      }\n      if (side.contains(e.target) && !e.target.hasAttribute(\"size\")) {\n        currentHighlight = e.target.id;\n        let squareNum = parseInt(e.target.id.match(/\\d+/)[0]);\n        console.log(`e.target.id: ${e.target.id}`);\n\n        //horizontal checking\n\n        if (horizontal === \"true\") {\n          if ((parseInt(squareNum) - 1) % 10 + parseInt(currentSize) > 10) {\n            for (let i = squareNum; i <= parseInt((squareNum - 1) / 10) * 10 + 10; i++) {\n              let square = document.getElementById(`${sideText}square${parseInt(i)}`);\n              square.style.backgroundColor = \"red\";\n              placeAllowed = false;\n              placeLocation = squareNum;\n            }\n          }\n          //no collision and no overflow\n          else {\n            console.log(`collision: ${checkCollision(squareNum, horizontal, restrictedSquares)}`);\n            if (!checkCollision(squareNum, horizontal, restrictedSquares)) {\n              for (let i = 0; i < currentSize; i++) {\n                let square = document.getElementById(`${sideText}square${parseInt(squareNum) + i}`);\n                square.style.backgroundColor = \"green\";\n                placeAllowed = true;\n                placeLocation = squareNum;\n              }\n            }\n\n            //collision check horizontal\n            else {\n              for (let i = 0; i < currentSize; i++) {\n                if (!restrictedSquares.includes(squareNum + i)) {\n                  let square = document.getElementById(`${sideText}square${parseInt(squareNum) + i}`);\n                  square.style.backgroundColor = \"red\";\n                  placeAllowed = false;\n                  placeLocation = squareNum;\n                }\n              }\n            }\n          }\n        }\n\n        //vertical checking\n        else {\n          //check if overflow vertically\n          if (squareNum - 10 + currentSize * 10 > 100) {\n            console.log(`squareNum + currentSize*10:${squareNum + currentSize * 10}`);\n            for (let i = squareNum; i <= 100; i += 10) {\n              console.log(`squareNum + i: ${parseInt(i)}`);\n              let square = document.getElementById(`${sideText}square${parseInt(i)}`);\n              console.log(`squaresecondId: ${square.id}`);\n              square.style.backgroundColor = \"red\";\n              placeAllowed = false;\n              placeLocation = squareNum;\n            }\n          }\n\n          //check for collision vertically\n          else {\n            if (!checkCollision(squareNum, horizontal, restrictedSquares)) {\n              for (let i = 0; i < currentSize; i++) {\n                let square = document.getElementById(`${sideText}square${parseInt(squareNum) + i * 10}`);\n                square.style.backgroundColor = \"green\";\n                placeAllowed = true;\n                placeLocation = squareNum;\n              }\n            } else {\n              for (let i = 0; i < currentSize; i++) {\n                if (!restrictedSquares.includes(squareNum + i * 10)) {\n                  let square = document.getElementById(`${sideText}square${parseInt(squareNum) + i * 10}`);\n                  square.style.backgroundColor = \"red\";\n                  placeLocation = squareNum;\n                  placeAllowed = false;\n                }\n              }\n            }\n          }\n        }\n      }\n    });\n    side.addEventListener(\"click\", e => {\n      e.preventDefault();\n      console.log(e.target.getAttribute(\"horizontal\"));\n      console.log(e.target.getAttribute(\"vertical\"));\n    });\n    let shipCounter = 0;\n    for (const ship of shipList) {\n      let coordinateArray = ship.coordinateArray();\n      let coordLength = coordinateArray.length;\n      let gridShip = document.createElement(\"div\");\n      gridShip.style.backgroundColor = colorList[counter];\n      gridShip.style.border = \"3px solid\";\n      gridShip.setAttribute(\"size\", ship.getSize());\n      gridShip.id = `${sideText + shipNames[shipCounter]}`;\n      shipCounter += 1;\n      gridShip.setAttribute(\"index\", counter);\n      gridShip.setAttribute(\"draggable\", true);\n      //horizontal direction\n\n      if (coordinateArray[0][0] == coordinateArray[1][0]) {\n        gridShip.setAttribute(\"horizontal\", true);\n\n        // console.log(\"first\");\n        gridShip.style.gridRow = `${coordinateArray[0][0]} / ${coordinateArray[0][0]}`;\n        gridShip.style.gridColumn = `${coordinateArray[0][1]} / ${coordinateArray[coordLength - 1][1] + 1}`;\n      } else {\n        gridShip.setAttribute(\"horizontal\", false);\n        gridShip.style.gridRow = `${coordinateArray[0][0]} / ${coordinateArray[coordLength - 1][0] + 1}`;\n        gridShip.style.gridColumn = `${coordinateArray[0][1]} / ${coordinateArray[0][1]}`;\n      }\n\n      //click to flip direction\n      gridShip.addEventListener(\"click\", e => {\n        let size = parseInt(gridShip.getAttribute(\"size\"));\n        let gridShipSquares = [];\n        for (const pair of coordinateArray) {\n          let x = parseInt(pair[0]);\n          let y = parseInt(pair[1]);\n          gridShipSquares.push((x - 1) * 10 + y);\n        }\n        console.log(`Restricted Squares: ${restrictedSquares}`);\n        console.log(`gridShipSquares: ${gridShipSquares}`);\n        console.log(`coordinateArray: ${coordinateArray}`);\n        let shipHorizontal = gridShip.getAttribute(\"horizontal\");\n\n        //flip to horizontal\n        if (shipHorizontal == \"false\") {\n          console.log(\"vertical\");\n          for (let i = 0; i < size; i++) {\n            let x = parseInt(coordinateArray[i][0]);\n            let y = parseInt(coordinateArray[i][1]);\n            let currentNum = (x - 1) * 10 + y;\n            let workingNum;\n            console.log(`currentNum: ${currentNum}`);\n            console.log(`y + size - 1: ${y + size - 1}`);\n            let collision = false;\n\n            //check if can flip to right\n            if (y + size - 1 <= 10) {\n              console.log(\"no overflow to the right\");\n              for (let j = 0; j < size; j++) {\n                if (!gridShipSquares.includes(currentNum + j)) {\n                  if (restrictedSquares.includes(currentNum + j)) {\n                    collision = true;\n                    break;\n                  }\n                }\n              }\n              if (!collision) {\n                let otherShip = new _battle_js__WEBPACK_IMPORTED_MODULE_0__.Ship(x, y, x, y + size - 1);\n                player.gameboard.shipList[parseInt(gridShip.getAttribute(\"index\"))] = otherShip;\n                fullyRenderSide(side, player);\n                console.log(\"got to the end\");\n                break;\n              }\n            }\n\n            //check left \n            else if (y - (size - 1) > 0) {\n              console.log(\"no overflow to the left\");\n              for (let j = 0; j < size; j++) {\n                if (!gridShipSquares.includes(currentNum - j)) {\n                  if (restrictedSquares.includes(currentNum - j)) {\n                    collision = true;\n                    break;\n                  }\n                }\n              }\n              if (!collision) {\n                let otherShip = new _battle_js__WEBPACK_IMPORTED_MODULE_0__.Ship(x, y - size + 1, x, y);\n                player.gameboard.shipList[parseInt(gridShip.getAttribute(\"index\"))] = otherShip;\n                fullyRenderSide(side, player);\n                console.log(\"got to the end\");\n                break;\n              }\n            }\n          }\n        }\n\n        //flip to vertical\n        else {\n          console.log(\"horizontal\");\n          for (let i = 0; i < size; i++) {\n            let x = parseInt(coordinateArray[i][0]);\n            let y = parseInt(coordinateArray[i][1]);\n            let currentNum = (x - 1) * 10 + y;\n            let workingNum;\n            console.log(`currentNum: ${currentNum}`);\n            console.log(`x - size: ${x - size}`);\n            let collision = false;\n\n            //check if can flip up\n            if (x - size >= 0) {\n              console.log(\"no overflow up\");\n              for (let j = 0; j < size; j++) {\n                console.log(`currentNum + j*10: ${currentNum + j * 10}`);\n                if (!gridShipSquares.includes(currentNum - j * 10)) {\n                  if (restrictedSquares.includes(currentNum - j * 10)) {\n                    collision = true;\n                    break;\n                  }\n                }\n              }\n              if (!collision) {\n                let otherShip = new _battle_js__WEBPACK_IMPORTED_MODULE_0__.Ship(x - size + 1, y, x, y);\n                player.gameboard.shipList[parseInt(gridShip.getAttribute(\"index\"))] = otherShip;\n                fullyRenderSide(side, player);\n                console.log(\"got to the end\");\n                break;\n              }\n            }\n\n            //check if can flip down\n            else if (x + size <= 10) {\n              console.log(\"no overflow to the down\");\n              for (let j = 0; j < size; j++) {\n                if (!gridShipSquares.includes(currentNum + j * 10)) {\n                  if (restrictedSquares.includes(currentNum + j * 10)) {\n                    collision = true;\n                    break;\n                  }\n                }\n              }\n              if (!collision) {\n                let otherShip = new _battle_js__WEBPACK_IMPORTED_MODULE_0__.Ship(x, y, x + size - 1, y);\n                player.gameboard.shipList[parseInt(gridShip.getAttribute(\"index\"))] = otherShip;\n                fullyRenderSide(side, player);\n                console.log(\"got to the end\");\n                break;\n              }\n            }\n          }\n        }\n      });\n      gridShip.addEventListener(\"dragstart\", e => {\n        currentId = e.target.id;\n      });\n      gridShip.addEventListener(\"dragend\", e => {\n        clearSquares();\n        console.log(`left at: ${e.target.id}`);\n        console.log(`lastLocation: ${placeLocation}`);\n        console.log(`allowed: ${placeAllowed}`);\n        if (placeAllowed) {\n          console.log(\"allowed true\");\n          let ship = document.getElementById(e.target.id);\n          let currentSquare = document.getElementById(`${sideText}square${placeLocation}`);\n          let row = parseInt(currentSquare.getAttribute(\"horizontal\"));\n          let column = parseInt(currentSquare.getAttribute(\"vertical\"));\n          let horizontal = ship.getAttribute(\"horizontal\");\n          let otherShip;\n          if (horizontal == \"true\") {\n            otherShip = new _battle_js__WEBPACK_IMPORTED_MODULE_0__.Ship(row, column, row, column + currentSize - 1);\n          } else {\n            otherShip = new _battle_js__WEBPACK_IMPORTED_MODULE_0__.Ship(row, column, row + currentSize - 1, column);\n          }\n          player.gameboard.shipList[parseInt(ship.getAttribute(\"index\"))] = otherShip;\n          fullyRenderSide(side, player);\n        }\n      });\n      side.appendChild(gridShip);\n      counter += 1;\n    }\n  }\n  let leftButton = document.getElementById(\"left_button\");\n  let rightButton = document.getElementById(\"right_button\");\n  let leftReady = false;\n  let rightReady = false;\n  let startButton = document.getElementById(\"start_button\");\n  leftButton.addEventListener(\"click\", () => {\n    if (!leftReady) {\n      leftSide.innerHTML = \"\";\n      leftSide.style.backgroundColor = \"gray\";\n      leftButton.style.backgroundColor = \"gray\";\n      leftReady = !leftReady;\n    } else {\n      leftSide.style.backgroundColor = \"transparent\";\n      leftButton.style.backgroundColor = \"aqua\";\n      leftReady = !leftReady;\n      fullyRenderSide(leftSide, playerOne);\n    }\n    if (leftReady && rightReady) {\n      startButton.style.display = \"inline\";\n    } else {\n      startButton.style.display = \"none\";\n    }\n  });\n  rightButton.addEventListener(\"click\", () => {\n    if (!rightReady) {\n      rightSide.innerHTML = \"\";\n      rightSide.style.backgroundColor = \"gray\";\n      rightButton.style.backgroundColor = \"gray\";\n      rightReady = !rightReady;\n    } else {\n      rightSide.style.backgroundColor = \"transparent\";\n      rightButton.style.backgroundColor = \"aqua\";\n      rightReady = !rightReady;\n      fullyRenderSide(rightSide, playerTwo);\n    }\n    if (leftReady && rightReady) {\n      startButton.style.display = \"inline\";\n    } else {\n      startButton.style.display = \"none\";\n    }\n  });\n  startButton.addEventListener(\"click\", () => {\n    announcement.textContent = \"\";\n    const newLeft = leftSide.cloneNode(true);\n    leftSide.replaceWith(newLeft);\n    const newRight = rightSide.cloneNode(true);\n    rightSide.replaceWith(newRight);\n    newLeft.innerHTML = \"\";\n    newRight.innerHTML = \"\";\n    newLeft.style.backgroundColor = \"transparent\";\n    newRight.style.backgroundColor = \"transparent\";\n    leftButton.style.display = \"none\";\n    rightButton.style.display = \"none\";\n    startButton.style.display = \"none\";\n    addGridBoxes(newLeft, []);\n    addGridBoxes(newRight, []);\n    let leftTurn = true;\n    let rightTurn = false;\n    let playerText1 = document.getElementById(\"playerText1\");\n    let playerText2 = document.getElementById(\"playerText2\");\n    playerText1.classList.add(\"turn\");\n    newLeft.addEventListener(\"click\", e => {\n      if (rightTurn && e.target.classList.contains(\"gridBox\")) {\n        e.preventDefault();\n        let x = parseInt(e.target.getAttribute(\"horizontal\"));\n        let y = parseInt(e.target.getAttribute(\"vertical\"));\n        let attackList = playerOne.gameboard.attackList;\n        if (!checkPair(x, y, attackList)) {\n          leftTurn = !leftTurn;\n          rightTurn = !rightTurn;\n          playerText2.classList.remove(\"turn\");\n          playerText1.classList.add(\"turn\");\n          let shipSunk;\n          if (playerOne.gameboard.recieveAttack(x, y)) {\n            e.target.style.color = \"red\";\n            e.target.style.borderColor = \"black\";\n            for (const ship of playerOne.gameboard.shipList) {\n              let shipCoords = ship.coordinateArray();\n              for (const pair of shipCoords) {\n                if (parseInt(pair[0]) == x && parseInt(pair[1]) == y) {\n                  shipSunk = ship.isSunk();\n                }\n              }\n              console.log(shipCoords);\n            }\n          }\n          if (shipSunk) {\n            announcement.innerHTML = \"Ship Has Been Sunk!\";\n            shipSunk = !shipSunk;\n          } else {\n            announcement.innerHTML = \"\";\n          }\n          e.target.innerHTML = \"X\";\n          if (playerOne.gameboard.allSink()) {\n            endGame(\"Player 2\");\n          }\n          console.log(e.target.getAttribute(\"horizontal\"));\n          console.log(e.target.getAttribute(\"vertical\"));\n        }\n      }\n    });\n    newRight.addEventListener(\"click\", e => {\n      if (leftTurn && e.target.classList.contains(\"gridBox\")) {\n        e.preventDefault();\n        let x = parseInt(e.target.getAttribute(\"horizontal\"));\n        let y = parseInt(e.target.getAttribute(\"vertical\"));\n        let attackList = playerTwo.gameboard.attackList;\n        if (!checkPair(x, y, attackList)) {\n          leftTurn = !leftTurn;\n          rightTurn = !rightTurn;\n          playerText1.classList.remove(\"turn\");\n          playerText2.classList.add(\"turn\");\n          let shipSunk;\n          if (playerTwo.gameboard.recieveAttack(x, y)) {\n            e.target.style.color = \"red\";\n            e.target.style.borderColor = \"black\";\n            for (const ship of playerTwo.gameboard.shipList) {\n              let shipCoords = ship.coordinateArray();\n              for (const pair of shipCoords) {\n                if (parseInt(pair[0]) == x && parseInt(pair[1]) == y) {\n                  shipSunk = ship.isSunk();\n                }\n              }\n              console.log(shipCoords);\n            }\n          }\n          if (shipSunk) {\n            announcement.innerHTML = \"Ship Has Been Sunk!\";\n            shipSunk = !shipSunk;\n          } else {\n            announcement.innerHTML = \"\";\n          }\n          e.target.innerHTML = \"X\";\n          if (playerTwo.gameboard.allSink()) {\n            endGame(\"Player 1\");\n          }\n          console.log(e.target.getAttribute(\"horizontal\"));\n          console.log(e.target.getAttribute(\"vertical\"));\n        }\n      }\n    });\n  });\n  function endGame(player) {\n    let screen = document.createElement(\"div\");\n    screen.classList.add(\"backScreen\");\n    let screenContent = document.createElement(\"div\");\n    screenContent.classList.add(\"end_screen\");\n    let text = document.createElement(\"h1\");\n    text.textContent = `${player} Won!`;\n    let button = document.createElement(\"button\");\n    button.textContent = \"Restart\";\n    button.classList.add(\"end_button\");\n    let body = document.getElementById(\"body\");\n    screenContent.appendChild(text);\n    screenContent.appendChild(button);\n    screen.appendChild(screenContent);\n    body.appendChild(screen);\n    button.addEventListener(\"click\", () => {\n      location.reload();\n    });\n  }\n});\n\n//# sourceURL=webpack://battleship/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;